 
//    by BFS
  
void solve(int src, map<int, bool>& vis, map<int, int>& parent, vector<vector<int>>& adj) {
    queue<int> q;
    
    q.push(src);
    vis[src] = true;
    parent[src] = -1;
    
    while (!q.empty()) {
        int curr = q.front();
        q.pop();
        for (int i = 0; i < adj[curr].size(); i++) {
            if (adj[curr][i] && !vis[i]) {
                vis[i] = true;
                parent[i] = curr;
                q.push(i);
            }
        }
    }
}

int numProvinces(vector<vector<int>>& adj, int V) {
    map<int, bool> vis;
    map<int, int> parent;
    int count = 0;
    
    for (int i = 0; i < V; i++) {
        if (!vis[i]) {
            solve(i, vis, parent, adj);
            count++;
        }
    }
    
    return count;
}
