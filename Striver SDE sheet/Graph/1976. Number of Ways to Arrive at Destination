    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>>adj[n];

        for(auto it : roads){
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }

        priority_queue<pair<long long int,long long int>,
            vector<pair<long long int,long long int>>, greater<pair<long long int,long long int>>> pq;
            vector<long long int> dist(n, LLONG_MAX), ways(n,0);
            dist[0] = 0;
            ways[0] = 1;
            pq.push({0,0});
            int mod = (long long int)(1e9 + 7);
            // we can use long long int inplace of auto
            while(!pq.empty()){
                auto dis = pq.top().first;
                auto node = pq.top().second;
                pq.pop();
                for(auto it : adj[node]){
                    auto adjNode = it.first;
                    auto edW = it.second;
                    // this is first time I am coming with this short distance
                    if(dis+edW < dist[adjNode]){
                        dist[adjNode] = dis + edW;
                        pq.push({dis + edW, adjNode});
                        ways[adjNode] = ways[node];
                    }
                    else if(dis + edW == dist[adjNode]){
                        ways[adjNode] = (ways[adjNode] + ways[node])%mod;
                    }
                }
            }
        return ways[n-1] % mod;    
    }
