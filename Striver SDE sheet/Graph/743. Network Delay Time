    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int, vector<pair<int,int>>>adj;
        for(auto it: times){
            int src = it[0];
            int desti = it[1];
            int weight = it[2];

            adj[src].push_back({desti,weight});
        }
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
        vector<int>dist(n+1,1e9);
        
        dist[k] = 0;
        pq.push({0,k});

        while(!pq.empty()){
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            for(auto it : adj[node]){
                int adjnode = it.first;
                int tempdis = it.second;

                if(dis+tempdis<dist[adjnode]){
                    dist[adjnode] = dis+tempdis;
                    pq.push({dis+tempdis,adjnode});
                }
            }
        }

        int ans = INT_MIN;

        for(int i=1; i<=n; i++){
            ans = max(ans,dist[i]);
        }
        
        return ans == 1e9 ? -1 : ans;
    }
