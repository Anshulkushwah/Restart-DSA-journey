    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        // make adj list
        vector<int>adj[N];
        for(auto it:edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        
        // make distance array
        int dist[N];
        for(int i=0; i<N; i++) dist[i] = INT_MAX;
        
        
        // apply BFS
        dist[src] = 0;
        queue<int>q;
        q.push(src);
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it : adj[node]){
                if(dist[node]+1 < dist[it]){
                    dist[it] = dist[node] +1;
                    q.push(it);
                }
            }
        }
        
        // Make ans array
        vector<int>ans(N,-1);
        for(int i=0; i<N; i++){
            if(dist[i] != INT_MAX) ans[i] = dist[i];
        }
        
        return ans;
    }
