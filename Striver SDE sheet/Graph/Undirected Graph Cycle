    // Function to detect cycle in an undirected graph with BFS.
    
    bool solve(int src,map<int,int>& parent,map<int,bool>&vis,vector<int> adj[]){
        queue<int>q;
        
        q.push(src);
        vis[src] = true;
        parent[src] = -1;
        
        while(!q.empty()){
            int Node = q.front();
            q.pop();
            for(auto neigh : adj[Node]){
                if(vis[neigh] == true && neigh != parent[Node]) return true;
                
                else if(!vis[neigh]){
                    q.push(neigh);
                    vis[neigh] = true;
                    parent[neigh] = Node;
                }
            }
        }
        
        return false;
    }

    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        map<int,bool>vis;
        map<int, int> parent;
        
        
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(solve(i,parent,vis,adj) == true) return true;
            }
        }
        
        return false;
        
    }
