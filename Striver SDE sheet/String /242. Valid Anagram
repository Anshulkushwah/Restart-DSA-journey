// class Solution {
// public:
//     bool isAnagram(string str1, string str2) {
//         int size1 = str1.size();
//        int size2 = str2.size();

//        if(size1 != size2) return false;

//        unordered_map< char,int>mp1;
//        unordered_map<char,int>mp2;

//        for(int i = 0; i<size1; i++){
//         mp1[str1[i]]++;
//         mp2[str2[i]]++;
//        }

//        for(auto it:mp1.begin();it!=mp1.end();it++){
//             if(mp1[it->first] != mp2[it->first]) return false;
//             if(mp1[it->second] != mp2[it->second]) return false;
//         }
//     return true;
//     }
// };
// class Solution {
// public:
//     bool isAnagram(string s, string t) {
//         sort(s.begin(),s.end());
//         sort(t.begin(),t.end());
//         if(s.length() != t.length())
//             return false;
//         for(int i = 0 ; i<t.length();i++){
//             if(s[i] == t[i])
//                 continue;
//             return false;
//         }
//         return true;
//     }
// };


class Solution {
public:
    bool isAnagram(string s, string t) {
        int count[26] ={0};

        for(char x: s){
            count[x-'a']++;
        }

        for(char x:t){
            count[x-'a']--;
        }

        for(int val: count){
            if(val!=0){
                return false;
            }
        }

        return true;

    }
}    
