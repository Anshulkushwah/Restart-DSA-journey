    // TreeNode* lCAofBinaryTree(TreeNode* root, TreeNode* p, TreeNode* q) {
    //     if(root == NULL) return NULL;
    //     if(root == p || root == q) return root;
        
    //     TreeNode* Leftans = (lCAofBinaryTree(root->left,p,q));
    //     TreeNode* Rightans = (lCAofBinaryTree(root->right,p,q));

    //     if(Rightans != NULL && Leftans != NULL) return root;
    //     if(Leftans != NULL && Rightans == NULL) return Leftans;
    //     else return Rightans;
    // }

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        while(root!=NULL){
            if(root->val > p->val && root->val > q->val) root = root->left;
            else if(root->val < p->val && root->val < q->val) root = root->right;
            else return root;
        } 
        return NULL;
    }
