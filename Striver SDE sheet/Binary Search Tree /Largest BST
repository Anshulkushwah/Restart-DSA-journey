    class Info{
      public :
        int mini;
        int maxi;
        int size;
        bool isBST;
        
        Info(){
        }
        
        Info(int a, int b, int c, bool d){
            mini = a;
            maxi = b;
            size = c;
            isBST = d;
        }
    };
    
    Info solve(Node *root, int &ans){
        // base case
        if(root == NULL)
            return Info(INT_MAX, INT_MIN,0,true);
            
        // SOLVE for left && right
        Info leftAns = solve(root->left, ans);
        Info rightAns = solve(root->right, ans);
        
        // create ans for current node/ subtree
        Info curr;
        curr.size = leftAns.size+rightAns.size+1;
        curr.mini = min(leftAns.mini,root->data);
        curr.maxi = max(rightAns.maxi,root->data);
        
        if(leftAns.isBST && rightAns.isBST && (root->data > leftAns.maxi && root->data <rightAns.mini)){
            curr.isBST = true;
        }
        else{
            curr.isBST = false;
        }
        
        // update ans if curr subtree is BST
        if(curr.isBST) ans = max(ans,curr.size);
        
        // return all value of current subtree to upper level
        
        return curr;
        
    }
    
    int largestBst(Node *root)
    {
    	//Your code here
    	int ans = 0;
    	solve(root,ans);
    	return ans;
    }
