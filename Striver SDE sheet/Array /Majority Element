// class Solution {
// public:
//     int majorityElement(vector<int>& nums) {

//         int n = nums.size();
//         int k = n/2;
//         unordered_map<int,int>mp;

//         for(int i = 0; i<nums.size();i++){
//             mp[nums[i]]++;
//         }
//         for(auto i : mp){
//             if(i.second > k) return i.first;
//         }

//         return 0;
//     }
// };

// class Solution {
// public:
//     int majorityElement(vector<int>& nums) {
//         int el = 0;
//         int count = 0;

//         for(int i = 0; i<nums.size(); i++){
//             if(count == 0){
//                 el = nums[i];
//             }
//             if(el == nums[i]) count++;
//             else count--;
//         }

//         count = 0;
//         for(int i=0; i<nums.size();i++){
//             if(el == nums[i]){
//                 count++;
//             }
//         }

//         if(count >nums.size()/2){
//             return el;
//         }
//         return -1;
        
//     }
// };

// The code begins by sorting the array nums in non-decreasing order using the sort function from the C++ Standard Library. This rearranges the elements such that identical elements are grouped together.
// Once the array is sorted, the majority element will always be present at index n/2, where n is the size of the array.
// This is because the majority element occurs more than n/2 times, and when the array is sorted, it will occupy the middle position.
// The code returns the element at index n/2 as the majority element.
// The time complexity of this approach is O(n log n) since sorting an array of size n takes O(n log n) time.
// class Solution {
// public:
//     int majorityElement(vector<int>& nums) {
//         sort(nums.begin(), nums.end());
//         int n = nums.size();
//         return nums[n/2];
//     }
// };


// Moore Voting Algorithm
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
        int candidate = 0;
        
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            
            if (num == candidate) {
                count++;
            } else {
                count--;
            }
        }
        
        return candidate;
    }
};
