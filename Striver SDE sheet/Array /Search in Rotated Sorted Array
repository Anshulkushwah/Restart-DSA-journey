class Solution {
public:


    int Pivot(vector<int>& nums){
        int n = nums.size();
        int low = 0;
        int high = n-1;

        int mid = low + (high-low)/2;

        while(low<high){

            if(nums[mid]>=nums[0]){
                low = mid+1;
            }
            else{
                high = mid;
            }

            mid = low + (high-low)/2;
        }

        return low;
    }

    int getAns(vector<int>& nums,int low, int high, int target) {
        
        while(low<=high){
            int mid = low + (high-low)/2;

            if(target == nums[mid]){
                return mid;
            } 
            else if(target<nums[mid]){
                high= mid-1;
            }

            else{
                low = mid+1;
            }
        }

        return -1;

    }


    int search(vector<int>& nums, int target) {
        int n = nums.size();

        int pivot = Pivot(nums);

        if(target>=nums[pivot] && target <= nums[n-1]){
            return getAns(nums,pivot, n-1,target);
            
        }

        else 
            return getAns(nums, 0, pivot,target);
    }
};
