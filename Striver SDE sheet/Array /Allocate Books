bool checkMin(vector<int>& arr,int mid, int n, int totalstudent){
        int studentcount=1;
        int page=0;

        for(int i = 0; i<n;i++){
            if(page+arr[i]<=mid){
                page+=arr[i];
            }

            else{
                studentcount++;
                if(studentcount>totalstudent || arr[i]>mid) return false;
                page = arr[i];
            }
        }

        return true;

}

int findPages(vector<int>& arr, int n, int m) {
    // Write your code here.

    if(m>n) return -1;

    int sum=0;

    for(int i =0; i < n; i++){
            sum+=arr[i];
    }

    int low =0;
    int high = sum;
    int ans = -1;

    while(low<=high){

        int mid = low+ (high-low)/2;
        if (checkMin(arr, mid, n, m)) {
                ans = mid;
                high = mid-1;
        } else
                low = mid+1;
    }
    return ans;
}

// striver 

// int countStudents(vector<int> &arr, int pages) {
//     int n = arr.size(); //size of array.
//     int students = 1;
//     long long pagesStudent = 0;
//     for (int i = 0; i < n; i++) {
//         if (pagesStudent + arr[i] <= pages) {
//             //add pages to current student
//             pagesStudent += arr[i];
//         }
//         else {
//             //add pages to next student
//             students++;
//             pagesStudent = arr[i];
//         }
//     }
//     return students;
// }

// int findPages(vector<int>& arr, int n, int m) {
//     //book allocation impossible:
//     if (m > n) return -1;

//     int low = *max_element(arr.begin(), arr.end());
//     int high = accumulate(arr.begin(), arr.end(), 0);
//     while (low <= high) {
//         int mid = (low + high) / 2;
//         int students = countStudents(arr, mid);
//         if (students > m) {
//             low = mid + 1;
//         }
//         else {
//             high = mid - 1;
//         }
//     }
//     return low;
// }
