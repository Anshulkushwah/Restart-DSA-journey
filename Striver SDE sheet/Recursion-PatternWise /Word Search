class Solution {
public:
     bool solve(vector<vector<char>>& board, int i, int j , int k , string& word){
        //is not Safe 
        if( i < 0 || i>=board.size())
            return false;
        
        if(i < 0 || j>=board[0].size())
            return false;
        
        if(board[i][j] == '-')
            return false ;
        
        if(board[i][j] != word[k])
            return false;
        
        //Base case 
        if(k>= word.length()-1)
            return true ;
        
        // hm abhi is character pr khade hai
        char ch = board[i][j];
        
        //us character ko mark visited kr dia
        board[i][j] = '-';
        
        //traverse LRUD
        
        bool left = solve(board,i,j-1,k+1,word);
        
        bool right = solve (board, i, j+1 , k+1 , word);
        
        bool up = solve(board, i-1, j , k+1 ,word);
        
        bool down = solve(board, i+1 , j, k+1, word);
        
        // back track
        // jis character ko dash mark kia use pehele jesa krdo
        board[i][j] = ch;
        
        return left || right || up || down ;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        
        //we will call from each cell 
        for(int i =0 ; i <m ; i++){
            for(int j = 0; j<n; j++){
                
                if(solve(board, i , j , 0 , word)){
                    return true ;
                }
            }
        }
        return false;
       
    }
};
