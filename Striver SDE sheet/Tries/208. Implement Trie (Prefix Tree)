class TrieNode {
public:
    char data;
    bool isTerminal;
    TrieNode* children[26];
    int count;

    TrieNode(char d) {
        this->data = d;
        this->isTerminal = false;
        this->count = 0;
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr;
        }
    }
};

class Trie {
public:
    TrieNode* root;

    Trie() {
        root = new TrieNode('\0'); // Initialize root with a null character
    }

    void insertHelper(TrieNode* root, string word) {
        // Base case
        if (word.length() == 0) {
            root->isTerminal = true;
            return;
        }

        char ch = word[0];
        int index = ch - 'a';
        TrieNode* child;

        if (root->children[index] != nullptr) {
            child = root->children[index];
        } else {
            child = new TrieNode(ch);
            root->children[index] = child;
        }

        insertHelper(child, word.substr(1));
    }

    void insert(string word) {
        insertHelper(root, word);
    }

    bool searchHelper(TrieNode* root, string word) {
        // Base case
        if (word.length() == 0) {
            return root->isTerminal;
        }

        char ch = word[0];
        int index = ch - 'a';

        if (root->children[index] != nullptr) {
            TrieNode* child = root->children[index];
            return searchHelper(child, word.substr(1));
        } else {
            return false;
        }
    }

    bool search(string word) {
        return searchHelper(root, word);
    }

    bool startsWithHelper(TrieNode* root, string word) {
        // Base case
        if (word.length() == 0) {
            return true;
        }

        char ch = word[0];
        int index = ch - 'a';

        if (root->children[index] != nullptr) {
            TrieNode* child = root->children[index];
            return startsWithHelper(child, word.substr(1));
        } else {
            return false;
        }
    }

    bool startsWith(string prefix) {
        return startsWithHelper(root, prefix);
    }
};
