/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    // use only O(N) square code
    int height(TreeNode* node){
        // base case
        if(node == NULL) return 0;

        int left = height(node->left);
        int right = height(node->right);

        int ans = max(left,right) +1;

        return ans;
    }
public:

    //o(N) solution
    pair<int,bool> solve(TreeNode* root){
        // base case
        if(root == NULL)
            return make_pair(0,true);

        pair<int,bool>left = solve(root->left);
        pair<int,bool>right = solve(root->right);

        int leftHeight = left.first;
        int rightHeight = right.first;

        bool diff = abs(leftHeight - rightHeight ) <= 1;
        bool leftbalanced = left.second;
        bool rightbalanced = right.second;

        if(diff && leftbalanced && rightbalanced)
            return make_pair(max(leftHeight,rightHeight)+1,true);
        else
            return make_pair(max(leftHeight,rightHeight)+1,false);
    }
        
    bool isBalanced(TreeNode* root) {

        // o(N) square solution
        // if(root==NULL) return true;

        // bool left = isBalanced(root->left);
        // bool right = isBalanced(root->right);

        // bool diff = abs(height(root->left) - height(root->right)) <=1;

        // if(left && right && diff) return true;

        // else return false;
        

        //o(N) solution
        pair<int,bool> ans = solve(root);
        return ans.second;
    }
};
