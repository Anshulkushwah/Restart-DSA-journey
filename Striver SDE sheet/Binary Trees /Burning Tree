    Node* createParentMapping(Node* root,int target,
            unordered_map<Node*, Node*> &nodeToParent){
        
        Node* res = NULL;
        queue<Node*>q;
        q.push(root);
        nodeToParent[root] = NULL;
        
        while(!q.empty()){
            Node* front = q.front();
            q.pop();
            
            if(front->data == target) res = front;
            
            if(front->left){
                nodeToParent[front->left] = front;
                q.push(front->left);
            }
            if(front->right){
                nodeToParent[front->right] = front;
                q.push(front->right);
            }
        }
        return res;
        
    }
    
    void burnTree(Node* root, unordered_map<Node*, Node*> &nodeToParent, int &ans){
        unordered_map<Node*,bool>vis;
        queue<Node*>q;
        
        q.push(root);
        vis[root] = true;
        
        while(!q.empty()){
            bool flag = 0;
            int size = q.size();
            for(int i=0; i<size; i++){
                // process neighbourung nodes
                Node* front = q.front();
                q.pop();
                
                if(front->left&& !vis[front->left]){
                    flag = 1;
                    q.push(front->left);
                    vis[front->left] = 1;
                }
                
                if(front->right && !vis[front->right]){
                    flag = 1;
                    q.push(front->right);
                    vis[front->right]=1;
                }
                if(nodeToParent[front] && !vis[nodeToParent[front]]){
                    flag = 1;
                    q.push(nodeToParent[front]);
                    vis[nodeToParent[front]] = 1;
                }
            }
            if(flag == 1) ans++;
        }
    }
    
    
    
    int minTime(Node* root, int target) 
    {
        // algo
        // step 1 : create nodeToParent mapping
        // step 2 : find target node
        // step 3 : burn the tree in min time
        
        int ans = 0 ;
        unordered_map<Node*, Node*> nodeToParent;
        Node* targetNode = createParentMapping(root, target,nodeToParent);
        
        burnTree(targetNode,nodeToParent,ans);
        
        return ans;
    }
