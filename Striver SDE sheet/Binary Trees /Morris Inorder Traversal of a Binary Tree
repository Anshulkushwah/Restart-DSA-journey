/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

// T.C : O(N)
// S.C : 0(N)
    // void inorderTraversal(TreeNode* root,vector<int>&ans) {
    //     // base case
    //     if(root == NULL) return;
    //     // L
    //     inorderTraversal(root->left,ans); 
    //     // N
    //     ans.push_back(root->val);
    //     // R
    //     inorderTraversal(root->right,ans); 

    // }
    // vector<int> inorderTraversal(TreeNode* root) {
    //     vector<int>ans;
    //     inorderTraversal(root,ans);
    //     return ans;
    // }
// ----------------------------------------------------------------------------------

// T.C : O(N)
// S.C : 0(1);
// Morris traversal

    // TreeNode* predecessor(Node* root){
    //     if(root == NULL) return NULL;
    //     TreeNode* curr = root->left;

    //     if(curr == NULL) return NULL;
    //     while(curr->right != NULL) curr = curr->right;

    //     return curr;
    // }

    void inorderTraversal(TreeNode* root,vector<int>&ans) {
        TreeNode* curr = root;

        while(curr!=NULL){

            if(curr->left == NULL){
                ans.push_back(curr->val);
                curr=curr->right;
            }
            else{
                TreeNode* pred = curr->left;
                while(pred->right != NULL && pred->right!=curr) pred = pred->right;

                // link creation
                if(pred->right == NULL){
                    pred->right = curr;
                    curr = curr->left;
                }

                // Link remove
                else{
                    pred->right = NULL;
                    ans.push_back(curr->val);
                    curr = curr->right;
                }
            }
        }
    }    

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>ans;
        inorderTraversal(root,ans);
        return ans;
    }

};
