    int widthOfBinaryTree(TreeNode* root) {
        if(root == NULL) return 0;
        int ans = 0;
        queue<pair<TreeNode*,int>>q;
        q.push(make_pair(root,0));
        while(!q.empty()){
            int first = 0;
            int last = 0;
            int size = q.size();
            int m_min = q.front().second; // to make the id starting from zero

            for(int i=0;i<size; i++ ){
                // Calculate current position relative to the minimum position in the level
                long cur_id = q.front().second - m_min;
                // Get the current node
                TreeNode* node = q.front().first;
                q.pop();
                // If this is the first node in the level, update the 'first' variable
                if (i == 0) first = cur_id;

                // If this is the last node in the level,update the 'last' variable
                if (i == size - 1) last = cur_id;

                // Enqueue the left child of the current node with its position
                if (node->left) q.push({node->left, cur_id * 2 + 1});

                // Enqueue the right child of the current node with its position
                if (node->right) q.push({node->right, cur_id * 2 + 2});
            }
            ans = max(ans, last - first + 1);
        }
        return ans;
    }
