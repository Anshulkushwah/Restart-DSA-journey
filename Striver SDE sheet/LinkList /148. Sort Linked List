
class Solution {
public:
    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode * dummy = new ListNode(0);
        ListNode* tail = dummy;

        while (l1!=NULL && l2!=NULL) {
            if (l1->val <= l2->val) {
                tail->next = l1;
                l1 = l1->next;
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }

        if (l1!=NULL)
            tail->next = l1;
        else if (l2!=NULL)
            tail->next = l2;

        return dummy->next;
    }
    
    ListNode* sortList(ListNode* head) {
        if (head == NULL || head->next == NULL)
        return head;

        // Find the middle node using slow and fast pointers
        ListNode* slow = head;
        ListNode* fast = head->next;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode* mid = slow->next;
        slow->next = nullptr; // Break the list into two halves

        ListNode* l1 = sortList(head); // Sort the first half
        ListNode* l2 = sortList(mid);  // Sort the second half

        return merge(l1, l2); // Merge the sorted halves
    }
};
