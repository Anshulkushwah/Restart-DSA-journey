NORMAL SOLUTION

    Node* reverse(Node * &head){
        
        if(head == NULL || head->next == NULL) return head;

        Node* prev = NULL;
        Node* curr = head;
        Node* forw = NULL;

        while(curr != NULL){
            forw = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forw;
        }
        return prev;
    }
    
    Node* addOne(Node *head) 
    {
        head = reverse(head);
        Node* temp = head;
        int carry = 1 ;
        
        while(temp!=NULL){
            
            temp->data = temp->data + carry;

            if(temp->data < 10){
                carry = 0;
                break;
            }else{
                temp->data = 0;
                carry = 1;
            }
            temp=temp->next;
        }

        if(carry == 1){
            Node* newNode = new Node(1);
            head = reverse(head);
            newNode->next = head;
            return newNode;
        }
        
      head = reverse(head);
      return head;
    }
/////////////////////////////////////////////////////
Recursive || best solution

    int helper(Node* temp){
        
        if(temp == NULL) return 1;
        
        // recursive
        int  carry = helper(temp->next);
        
        // backrack
        temp->data = temp->data + carry;
        if(temp->data < 10) return 0;
        
        temp->data = 0;
        return 1;
    }
    
    Node* addOne(Node *head) 
    {
       int carry = helper(head);
       if(carry == 1){
            Node* newNode = new Node(1);
            newNode->next = head;
            return newNode;
        }
        
      return head;
    }

