struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    
// Function to convert a vector to a linked list
// Node* convertArrToLinkedList(vector<int>& arr){
//     // Create a dummy node to serve as
//     // the head of the linked list
//     Node* dummyNode = new Node(-1);
//     Node* temp = dummyNode;

//     // Iterate through the vector and
//     // create nodes with vector elements
//     for(int i = 0; i < arr.size(); i++){
//         // Create a new node
//         // with the vector element
//         temp->bottom = new Node(arr[i]); 
//         // Move the temporary pointer
//         // to the newly created node
//         temp = temp->bottom; 
//     }
//     // Return the linked list starting
//     // from the next of the dummy node
//     return dummyNode->bottom; 
// }

// // Function to flatten a
// // linked list with child pointers
// Node* flatten(Node* head) {
//     vector<int> arr;

//     // Traverse through the linked list
//     while (head != nullptr) {
//         // Traverse through the child
//         // nodes of each head node
//         Node* t2 = head;
//         while (t2 != nullptr) {
//             // Store each node's data in the array
//             arr.push_back(t2->data);
//             // Move to the next child node
//             t2 = t2->bottom;
//         }
//         // Move to the next head node
//         head = head->next;
//     }

//     // Sort the array containing
//     // node values in ascending order
//     sort(arr.begin(), arr.end());

//     // Convert the sorted array
//     // back to a linked list
//     return convertArrToLinkedList(arr);
// }    
    
///////////////////////////////////////////////////////////////////////////////////////

// Merges two linked lists in a particular
// order based on the data value
Node* merge(Node* list1, Node* list2){
    // Create a dummy node as a
    // placeholder for the result
    Node* dummyNode = new Node(-1);
    Node* res = dummyNode;

    // Merge the lists based on data values
    while(list1 != NULL && list2 != NULL){
        if(list1->data < list2->data){
            res->bottom = list1;
            res = list1;
            list1 = list1->bottom;
        }
        else{
            res->bottom = list2;
            res = list2;
            list2 = list2->bottom;
        }
        res->next = NULL;
    }

    // Connect the remaining
    // elements if any
    if(list1){
        res->bottom = list1;
    } else {
        res->bottom = list2;
    }

    // Break the last node's
    // link to prevent cycles
    if(dummyNode->bottom){
        dummyNode->bottom->next = NULL;
    }

    return dummyNode->bottom;
}

// Flattens a linked list with child pointers
Node* flatten(Node* head){
    // If head is null or there 
    // is no next node, return head
    if(head == NULL || head->next == NULL){
        return head;
    }

    // Recursively flatten the
    // rest of the linked list
    Node* mergedHead = flatten(head->next);
    head = merge(head, mergedHead);
    return head;
}    
