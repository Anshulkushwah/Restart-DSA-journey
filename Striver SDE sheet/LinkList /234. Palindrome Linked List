/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reverse(ListNode* head1){

        if (head1 == NULL || head1->next == NULL) return head1; 
        
        ListNode* prev = NULL;
        ListNode* curr = head1;
        ListNode* forw = NULL;

        while(curr != NULL){
            forw = curr->next;
            curr->next = prev;
            prev=curr;
            curr = forw; 
        }
        return prev;
    }


    bool isPalindrome(ListNode* head) {
        if (head == NULL || head->next == NULL) return true;

        ListNode* slow = head;
        ListNode* fast = head;

        while (fast->next != NULL && fast->next->next != NULL) {
           slow = slow->next;
           fast = fast->next->next;  
        }
        
        ListNode* newHead = reverse(slow->next);

        ListNode* temp1 = head;
        ListNode* temp2 = newHead;

        while (temp2 != NULL) {

            // Compare data values of nodes from both halves
            // If values do not match,the list is not a palindrome
            if (temp1->val != temp2->val) {
                // Reverse the second half && back to its original state
                reverse(newHead);  
                // Not a palindrome
                return false;
                }
                // Move the first pointer
                temp1 = temp1->next; 
                // Move the second pointer
                temp2 = temp2->next;  
            }
            // Reverse the second half && back to its original state
            reverse(newHead);  
            // The linked list is a palindrome
            return true;  
    }
};
