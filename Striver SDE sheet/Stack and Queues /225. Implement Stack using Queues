// 2 queue used
// class MyStack {
// public:
//     queue<int> q1;
//     queue<int> q2;
//     MyStack() {   
//     }
    
//     void push(int x) {
//         q1.push(x);
//         while(!q2.empty()){
//             q1.push(q2.front());
//             q2.pop();
//         }
//         swap(q1,q2);
//     }
    
//     int pop() {
//         if(q2.empty()) return -1;

//         int topElement = q2.front();
//         q2.pop();
//         return topElement;
//     }
    
//     int top() {
//         return q2.front();
//     }
    
//     bool empty() {
//         return q2.empty();
//     }
// };

// optimised code | 1 queue used

class MyStack {
public:
    queue<int> q;
    MyStack() {   
    }
    
    void push(int x) {
        q.push(x);
        for(int i = 0; i<q.size()-1;i++){
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop() {
        if(q.empty()) return -1;

        int topElement = q.front();
        q.pop();
        return topElement;
    }
    
    int top() {
        return q.front();
    }
    
    bool empty() {
        return q.empty();
    }
};
