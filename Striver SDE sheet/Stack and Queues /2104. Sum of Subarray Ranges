class Solution {
public:

// Sum of Subarray Minimums

    vector<int>getNSL(vector<int>& arr, int n){
        vector<int>res(n,-1);
        stack<int>st;
        for(int i=0; i<n;i++){
            while(!st.empty() && arr[st.top()]>=arr[i])
                st.pop();
            if (!st.empty())
                res[i] = st.top();
            st.push(i);    
        }
        return res;
    }
    vector<int>getNSR(vector<int>& arr, int n){
        vector<int>res(n,n);
        stack<int>st;
        for(int i=n-1;i>=0;i--){
            while(!st.empty() && arr[st.top()]>arr[i])
                st.pop();
            if (!st.empty())
                res[i] = st.top();
            st.push(i);    
        }
        return res;
    }

    long long sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        vector<int>NSL = getNSL(arr,n);
        vector<int>NSR = getNSR(arr,n);

        long long sum = 0;

        for(int i=0; i<n ; i++){
            long long ls = i-NSL[i]; //left mai kitne element honge
            long long rs = NSR[i]-i; //right mai kitne element honge

            long long totalways = rs*ls;

            // total sub array jinka mininum arr[i]
            long long totalsum = arr[i]*totalways;
            
            sum = sum+totalsum;
            
        }
        return sum;
    }

    // Sum of Subarray Maxi

    vector<int>getNGL(vector<int>& arr, int n){
        vector<int>res(n,-1);
        stack<int>st;
        for(int i=0; i<n;i++){
            while(!st.empty() && arr[st.top()]<=arr[i])
                st.pop();
            if (!st.empty())
                res[i] = st.top();
            st.push(i);    
        }
        return res;
    }
    vector<int>getNGR(vector<int>& arr, int n){
        vector<int>res(n,n);
        stack<int>st;
        for(int i=n-1;i>=0;i--){
            while(!st.empty() && arr[st.top()]<arr[i])
                st.pop();
            if (!st.empty())
                res[i] = st.top();
            st.push(i);    
        }
        return res;
    }

    long long sumSubarrayMaxi(vector<int>& arr) {
        int n = arr.size();
        vector<int>NGL = getNGL(arr,n);
        vector<int>NGR = getNGR(arr,n);

        long long sum = 0;

        for(int i=0; i<n ; i++){
            long long ls = i-NGL[i]; //left mai kitne element honge
            long long rs = NGR[i]-i; //right mai kitne element honge

            long long totalways = rs*ls;

            // total sub array jinka mininum arr[i]
            long long totalsum = arr[i]*totalways;
            
            sum = sum+totalsum;
            
        }
        return sum;
    }

    long long subArrayRanges(vector<int>& arr) {
        return sumSubarrayMaxi(arr)-sumSubarrayMins(arr);
        
    }
};
