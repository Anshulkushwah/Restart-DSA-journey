// class Solution {
// public:
//     int trap(vector<int>& arr) {
//          // code here
//         int n = arr.size();
//         int left[n];
//         int right[n];
        
//         left[0] = arr[0];
//         for(int i = 1; i<n; i++){ // from left to right
//             left[i] = max(left[i-1],arr[i]);
//         }
        
//         right[n-1]=arr[n-1];
//         for(int i = n-2; i>=0; i--){ //from right to left 
//             right[i]=max(right[i+1],arr[i]);
//         }
        
//         long long ans = 0 ;
        
//         for(int i = 0; i<n; i++){
//             ans = ans + (min(left[i],right[i])-arr[i]);
//         }
        
//         return ans;
//     }
// };

////////////////////////////////////////////////////////////////////////
// T.C. : O(3N);
// S.C. : O(2N);

class Solution {
public:
    int trap(vector<int>& height) {int n = height.size();
    int left = 0, right = n - 1;
    int res = 0;
    int maxLeft = 0, maxRight = 0;
    while (left <= right) {
      if (height[left] <= height[right]) {
        if (height[left] >= maxLeft) {
          maxLeft = height[left];
        } else {
          res += maxLeft - height[left];
        }
        left++;
      } else {
        if (height[right] >= maxRight) {
          maxRight = height[right];
        } else {
          res += maxRight - height[right];
        }
        right--;
      }
    }
    return res;
}
};
/////////////
// T.C. : O(N);
// S.C. : O(1);
