link : https://practice.geeksforgeeks.org/problems/sort-an-array-of-0s-1s-and-2s4231/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

class Solution
{
    public:
    void sort012(int a[], int n)
    {
        int low = 0, high = n-1, mid = 0;
    
        while(mid <= high){
    
            if(a[mid]==0)
                swap(a[mid++], a[low++]);
           
            else if(a[mid]==1)
                 mid++;
    
            else
                swap(a[mid], a[high--]);
        }
    }
};





/////////////////////////////////////////////






#include <bits/stdc++.h>
using namespace std;

// Three Way Partitioning function
void sort_3way(int A[], int n)
{
    // Declaring 3 pointers         
    int low = 0;
    int mid = 0;
    int high = n - 1;

    // Traverse array till completely sorted
    while (mid <= high) {
        switch (A[mid]) {

        // If the element is 0
        case 0:
            // Swapping and updating pointers
            swap(A[low++], A[mid++]);
            break;

        // If the element is 1 .
        case 1:
            mid++;
            break;

        // If the element is 2
        case 2:
            swap(A[mid], A[high--]);
            break;
        }
    }
}

int main()
{
    int arr[] = {0, 1, 2, 2, 1, 0, 0, 2, 0, 1, 1, 0};
    int n = sizeof(arr) / sizeof(int);

    // Calling the sort function
    sort_3way(arr, n);

    // Printing the sorted array
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";

    return 0;
}
