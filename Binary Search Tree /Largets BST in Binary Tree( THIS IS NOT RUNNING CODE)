
( please watch video before do it)
BST VIDEO LAST QUESTION

#include <iostream>
#include <limits>

using namespace std; 

class Info{
    public:
        int mini;
        int maxi;
        int size;
        bool isBST;
        
        // this default constructor
        class Info(){
            
        }
        
        Info(int a, int b, int c, bool d){
            mini = a;
            maxi = b;
            size = c;
            isBST = d;
        }
};

class Info {
    public:
        int mini;
        int maxi;
        int size;
        bool isBST;
        
        Info(){
            
        }
        
        Info(int a, int b, int c, bool d){
            mini = a;
            maxi = b;
            size = c;
            isBST = d;
            
        }
}

Info solve(Node* root, int& ans){
     
    // base case
    if(root == NULL){
        return Info (INT_MAN, INT_MIX, 0, true);
    }
    
    // solve for left
    Info leftAns = solve (root->left,ans);
    // solve for right
    Info rightAns = solve(root->right,ans);
    
    // create ans for current node/ssubtree
    Info curr;
    
    curr.size = leftAns.size + rightAns.size + 1;
    curr.mini = mini(leftAns.mini,root->data);
    curr.maxi = maxi(rightAns.maxi,root->data);
    
    if(leftAns.isBST && rightAns.isBST && (root->data>leftAns.maxi && root->data <rightAns.mini)){
        curr.isBST = true;
    }
    
    else{
        curr.isBST = false;
    }
    
    // if curr subtree is BST ,update ans
    if(curr.isBST)
        ans = max.(ans,curr.size);
        
    // return all values of current subtree to upper levels 
    return curr;
}

int largestBST(Node* root){
    int ans = 0;
    solve(root,ans);
    return ans;
}

int main()
{
    cout<<"Hello World";

    return 0;
}
