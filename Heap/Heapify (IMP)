/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

class Heap{
    public:
    int arr[300];
    int size ;
    
    Heap(){
        size = 0;
    }
    
    void insertIntoHeap(int val){
        size = size+1;
        int index =size;
        arr[index] = val;
        
        while(index >1){
            int parentIndex = index/2;
            
            if(arr[parentIndex]<arr[index]){
                swap(arr[parentIndex],arr[index]);
                index = parentIndex;
            }
            
            else{
                break;
            }
        }
    }
    
    void print(){
    for(int i=1; i<=size;i++){
        cout<<arr[i]<<" ";
    }
    cout <<endl;
        
    }



    void deleteFromHeap(){
    if (size == 0){
        cout<<"heap is always empty "<<endl;
        return;
    }
    
    // step 1 In heap always and only delete root Node;
    swap(arr[1],arr[size]);
    
    // step 2 
    size--;
    
    // step 3 
    int index = 1;
    
    while(index<= size){
        int largest = index;
        int left = index*2;
        int right = index*2+1;
        
        if(left <=size && arr[left] < arr[largest]){
            largest=left;
        }
        
        if(right <= size && arr[right]>arr[largest]){
            largest = right;
        }
        
        if(largest != index){
            swap(arr[index],arr[largest]);
            index = largest;
        }
        
        else{
            // agar largest change nahi hua to iska mtlb currect position par aa chuka hai
            break;
        }
    }
}

// heapify function just like delete function
void heapify(int arr[], int n, int i){
    int largest = i;
    int left = 2*i;
    int right = 2*i+1;
    if(left<=n && arr[left] > arr[largest]){
        largest = left;
    }
    
    if(right<=n && arr[right]>arr[largest]){
        largest = right;
    }
    
    if(largest != i){
        swap(arr[largest],arr[i]);
        heapify(arr,n,largest);
    }
}

};


int main()
{
    Heap maxheap;
    
    maxheap.insertIntoHeap(2);
    maxheap.insertIntoHeap(3);
    maxheap.insertIntoHeap(4);
    maxheap.insertIntoHeap(5);
    maxheap.insertIntoHeap(6);
    maxheap.insertIntoHeap(1);
    
    maxheap.print();
    
    maxheap.deleteFromHeap();
    maxheap.print();

    return 0;
}
