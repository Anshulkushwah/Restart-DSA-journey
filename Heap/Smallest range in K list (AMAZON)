/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>
#include <queue>
using namespace std;

class Info{
    public:
    int data;
    int col;
    int row;
    
    
    Info(int d,int r,int c){
        this->data = d;
        this->col = c;
        this-> row = r;
    }
};

class cmp{
    public:
    
    bool operator()(Info* a, Info* b){
        return a->data > b->data;
    }
};


vector<int>mergeSortedArray(vector<vector<int>>arr,int k){
    vector<int>ans;
    int n = arr[0].size();
    
    priority_queue<Info*,vector<Info*>,cmp>minHeap;
    
    // step1 :- put the first element to all rows into the minHeap
    
    for(int i=0; i<k;i++){
        int element = arr[i][0];
        Info* temp = new Info(element,i,0);
        minHeap.push(temp);
    }
    
    while(minHeap.size()>0){
        
        // fetch the top element
        Info* temp = minHeap.top();
        minHeap.pop();
        
        // ans push
        ans.push_back(temp-> data);
        
        // check if next element exist if yes then push in Heap
        if(temp->col+1 < n){
            Info* toPush = new Info (arr[temp->row][temp->col+1],temp->row,temp->col+1);
            
            minHeap.push(toPush);
        }        
    }
    
    return ans;
}


int solve (vector<vector<int>>arr,int k,int n){
    int mini = INT_MAX;
    int maxi = INT_MIN;
    
    priority_queue<Info*,vector<Info*>,cmp>minHeap;
    
    for(int i=0; i<k; i++){
        mini = min(mini,arr[i][0]);
        maxi = max(maxi,arr[i][0]);
        minHeap.push(new Info(arr[i][0],i,0));
        
    }
    
    int start = mini;
    int end = maxi;
    
    while(!minHeap.empty()){
        
        Info * temp = minHeap.top();
        minHeap.pop();
        
        mini = temp->data;
        
        if(end - start > maxi-mini ){
            start = mini;
            end = maxi;
        }
        
        if(temp->col+1 < n) // for equal no of column
        //if(temp->col+1< arr[temp->row].size()) // for un-equal no of column
        {
            Info* toPush = new Info(arr[temp->row][temp->col+1],temp->row,temp->col+1);
            minHeap.push(toPush);
            
            maxi = max(maxi,toPush->data);
            
        }
        
        else{
            break;
        }
    }
    
    cout<<"start -> "<<start<<" end ->"<<end<<endl;
    return end-start;
} 

int main()
{
    vector<vector<int>>arr(3, vector<int>(4,0));
    
    // arr[0][0] = 1;
    // arr[0][1] = 3;
    // arr[0][2] = 5;
    // arr[0][3] = 7;
    
    // arr[1][0] = 2;
    // arr[1][1] = 4;
    // arr[1][2] = 6;
    // arr[1][3] = 8;
    
    // arr[2][0] = 0;
    // arr[2][1] = 9;
    // arr[2][2] = 10;
    // arr[2][3] = 11;
    
    // vector<int>ans = mergeSortedArray(arr,3);
    
    // for(int i=0; i<ans.size();i++){
    //     cout<<ans[i]<<" ";
    // }cout<<endl;
    
    
    arr[0][0] = 4;
    arr[0][1] = 10;
    arr[0][2] = 15;
    arr[0][3] = 24;
    arr[0][4] = 26;
    
    arr[1][0] = 0;
    arr[1][1] = 9;
    arr[1][2] = 12;
    arr[1][3] = 20;
 
    
    arr[2][0] = 5;
    arr[2][1] = 18;
    arr[2][2] = 22;
    arr[2][3] = 30;
    
    cout<<solve(arr,3,4)<<endl;

    return 0;
}
