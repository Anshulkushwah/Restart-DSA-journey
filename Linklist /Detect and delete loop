#include <iostream>

using namespace std;


class Node
{

public:
  int data;
  Node *next;

  // constructor
    Node (int data)
  {
    this->data = data;
    this->next = NULL;
  }



};

void
insertAtTail (Node * &tail, int d)
{
  // step 1 : 
  Node *newNode = new Node (d);
  //step 2 : 
  tail->next = newNode;
  //step 3 : 
  tail = newNode;
}

void
traverse (Node * &head)
{
  Node *temp = head;
  while (temp != NULL)
    {
      cout << temp->data << " ";
      temp = temp->next;
    }

  cout << endl;


}



int
countKFromLast (Node * &head, int k)
{
  //base case 

  if (head == NULL)
    return 0;

  int cnt = countKFromLast (head->next, k) + 1;

  if (cnt == k)
    cout << "Kth Node From end is " << head->data << endl;
  return cnt;

}

Node *
detectLoop (Node * &head)
{

  if (head == NULL)
    return NULL;

  Node *slow = head;
  Node *fast = head;

  while (fast != NULL && fast->next != NULL)
    {


      slow = slow->next;
      fast = fast->next->next;

      if (slow == fast)
	return slow;

    }

  return NULL;

}

bool
detectAndDeleteLoop (Node * &head)
{

  if (head == NULL)
    return false;

  // step 1 : detect loop present or not 

  Node *fast = detectLoop (head);

  // step 2 : detect begning node 
  Node *slow = head;

  while (fast != slow)
    {
      slow = slow->next;
      fast = fast->next;
    }
  Node *begningNode = slow;

  // step 3 : remove the loop connection 
  Node *temp = begningNode;

  while (temp->next != begningNode)
    {
      temp = temp->next;
    }

  temp->next = NULL;
  
  return true;
}




int
main ()
{
  //  object creation
  Node *first = new Node (3);
  Node *head = first;
  Node *tail = first;

  insertAtTail (tail, 5);
  insertAtTail (tail, 7);
  insertAtTail (tail, 9);
  Node *temp = tail;
  insertAtTail (tail, 11);
  insertAtTail (tail, 13);
  insertAtTail (tail, 14);
  insertAtTail (tail, 15);
  tail->next = temp;

  // traverse(head);
  cout << detectAndDeleteLoop (head) << endl;
  traverse (head);

  return 0;
}
