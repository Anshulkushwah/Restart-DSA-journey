#include <iostream>

using namespace std;


class Node
{

public:
  int data;
  Node *next;

  // constructor
    Node (int data)
  {
    this->data = data;
    this->next = NULL;
  }



};

void
insertAtTail (Node * &tail, int d)
{
  // step 1 : 
 Node* newNode = new Node(d);
  //step 2 : 
  tail -> next = newNode;
  //step 3 : 
  tail = newNode;
}

void
traverse (Node * &head)
{
  Node *temp = head;
  while (temp != NULL)
    {
      cout << temp->data << " ";
      temp = temp->next;
    }

  cout << endl;


}

 // tail  updation Home work 
void deleteNode(Node* &head, int target, int pos ){
    
    // empty list edge case
    
    if (head == NULL)
    return;
    
    Node* temp = head ;
    Node* prev = NULL;
    
    if(target == temp -> data && pos == 1 ){
        
        head = head->next;
        temp -> next = NULL;
        delete temp ;
    }
    
    else {
        while(temp != NULL && temp-> data != target ){
            prev = temp ;
            temp = temp -> next ;
        
    }
    
    // avoid unfound element edgecase 
    
    if(temp == NULL)
    {
        cout <<"Node not found " << endl ;
        return ;
    }
    
    prev -> next = temp->next;
    temp -> next = NULL;
    delete temp;
    
    }
}


int getLength(Node* & head ){
    
    Node * temp = head ;
    int len = 0;
    while(temp != NULL){
        len++;
        temp = temp->next ;
    }
    return len;
    
}

int
main ()
{
  //  object creation
  Node *first = new Node (3);
  Node *head = first;
  Node *tail = first;

  insertAtTail (tail, 5);
  insertAtTail (tail, 7);
  insertAtTail (tail, 9);
  insertAtTail (tail, 11);


  
  traverse (head);
  
  deleteNode(head , 10 ,1);

  traverse (head);
  
  cout<<getLength(head)<< endl; 

  return 0;
}
