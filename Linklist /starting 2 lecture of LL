/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

class Node{
    
    public:
    int data;
    Node* next;
    
    Node(int d){
        this->data = d;
        this->next = NULL;   
    }
       
};

void insertAtTail(Node* &tail, int d){
        Node* temp = new Node(d);
        tail->next = temp;
        tail = temp;
    }

void insertAtHead(Node* &head, int d){
        Node* temp = new Node(d);
        temp->next = head;
        head = temp;
    }

void insertAtPosition(Node* &head, int pos, int d){
    if(pos == 1){
        insertAtHead(head,d);
    }
    else{
        //step 1 : creation of new Node
        Node* newNode = new Node(d);
        
        // step 2:
        Node* prev = head;
        int t = pos-2;
        while(t--){
            prev = prev->next;
        }
        
        // step 3: connection update
        newNode->next = prev->next;
        prev->next = newNode;
    }
}    
    
void traverse(Node* &head){
    Node* temp = head;
    while(temp != NULL){
        cout<<temp->data<<" ";
        temp = temp ->next;
    }
    cout<< endl;
}    


void deleteNode(Node* &head, int target, int pos){
    
    // empty list 
    if(head == NULL){
        return;
    }
    
    Node* temp = head;
    Node* prev = NULL;
    
    if(target == temp->data && pos == 1 ){
        head = head->next;
        temp -> next = NULL;
        delete temp;
    }
    else{
        while(temp != NULL && temp->data != target){
            prev = temp;
            temp = temp->next;
        }
        
        // for element not found in LL
        if(temp ==NULL){
            cout<< "Node not found"<<endl;
            return;
        }
        
        prev->next = temp->next;
        temp->next = NULL;
        delete temp;
    }
}

int getLength(Node* &head){
    Node* temp = head;
    int len = 0;
    while(temp != NULL){
        len++;
        temp = temp->next;
    }
    return len;
}

Node* reverse(Node* &head){
    
    if(head == NULL){
        cout << "List is empty" << endl;
        return head;
    }
    
    Node* curr = head;
    Node* prev = NULL;
    
    while(curr != NULL){
        Node* forward = curr -> next;
        curr->next = prev;
        
        // aage badho
        prev = curr;
        curr = forward;
        
    }
    return prev;
}

Node* reverseRec(Node* curr, Node* prev){
    // base case
    if(curr == NULL){
        return prev;
    }
    
    // connection change -1 case solve kr dia 
    Node* forward = curr -> next;
    curr->next = prev;
    
    // baaki recursion sambhal lega 
    return reverseRec(forward, curr);
}

 Node* getMiddle(Node* head){
     if(head == NULL){
         cout<<"LIST IS empty "<< endl;
         return NULL;
     }
     Node* slow = head;
     Node* fast = head;
     
     while(fast!= NULL && fast->next != NULL){
        //  2 step fast
         fast = fast->next->next;
        //  1 step slow 
         slow = slow -> next;
     }
     return slow;
 }
 
 // linklist circular or not
bool isCircular(Node* &head){
    Node* temp = head ;
    
    while(temp != NULL){
        if(temp -> next == head ){
            return true ;
        }
        temp = temp -> next; 
    }
    
    return false ;
}

  Node* reverseInK(Node* &head, int k){
        // base case
        if(head == NULL) return NULL;
        
        Node* curr = head;
        Node* next = curr->next;
        Node* prev = NULL;
        int count = 0 ;
        
        // step 1 : reverse first k node 
        while(curr != NULL && count < k){
            next = curr->next;
            curr->next = prev;
            
            prev = curr;
            curr = next;
            count++;
        }
        // next pointer pointing at the head of the remaining list;
        if(next != NULL){
            // step 2: recursion will ans for remaining list
            Node* rem = reverseInK(next,k);
            // step 3: connection list in step 1 and step 3 
            head -> next = rem;
            
        }
        
        // step 4 : return head of entire list
        return prev;
        
    }
    
    Node* merge(Node* &head1, Node* &head2){
        
        if(head1 == NULL) return head2;
        
        if(head2 == NULL) return head1;
        
        Node* temp1 = head1;
        Node* temp2 = head2;
        
        Node* dummy = new Node(-1);
        Node* tempDummy = dummy;
        
        while(temp1 != NULL && temp2 != NULL ){
            
            if(temp1 -> data <= temp2 -> data) {
                tempDummy -> next = temp1;
                tempDummy = temp1;
                temp1 = temp1 -> next;
            }
            
            else {
                tempDummy -> next = temp2 ;
                tempDummy = temp2;
                temp2 = temp2 -> next;
            }
        }
        //it is possible that element are left in temp1 list
        while(temp1 != NULL){
            tempDummy -> next = temp1;
            tempDummy = temp1;
            temp1 = temp1->next;
        }
        
        //it is possible that element are left in temp1 list
        while(temp2 != NULL){
            tempDummy -> next = temp2;
            tempDummy = temp2;
            temp2 = temp2->next;
        }
        
        Node* head = dummy->next;
        
        //delete dummy Node
        dummy->next = NULL;
        delete dummy;
        
        return head;
    }

int main()
{
    // Node* b = new Node(3);
    // Node* head = b ;
    // Node* tail = b;
    
    // insertAtHead(head,5);
    // insertAtHead(head,7);
    // insertAtHead(head,9);
    // insertAtHead(head,11);
    // traverse(head);
    
    // insertAtTail(tail,5);
    // insertAtTail(tail,7);
    // insertAtTail(tail,9);
    // insertAtTail(tail,11);
    // traverse(head);
    
    // insertAtPosition(head,6,12);
    // traverse(head);
    
    // Node* head2 = NULL;
    // deleteNode(head2,13,1);
    // traverse(head);
    
    // cout << "Length of LL : "<<getLength(head)<<endl;
    
    // head = reverse(head);
    // traverse(head);
    
    // head = reverseRec(head, NULL);
    // traverse(head);
    
//      Node* middle = getMiddle(head);
    
//     cout<< "middle is " << middle->data ;
    
//      cout<< " Circular or not (0/1) = "<< isCircular(head)<< endl;

//     // to make Circular 

//     head -> next = head;


//   cout<< " Circular or not (0/1) = "<< isCircular(head)<< endl;

    //  traverse(head);
    //  head = reverseInK(head,3);
    //  traverse(head);
    
    Node* head1 = new Node(1);
    Node* tail1 = head1;
    insertAtTail(tail1,3);
    insertAtTail(tail1,5);
    
    traverse(head1);
    
    Node* head2 = new Node(2);
    Node* tail2 = head2;
    insertAtTail(tail2,4);
    insertAtTail(tail2,6);
    insertAtTail(tail2,8);
    insertAtTail(tail2,10);
    
    traverse(head2);
    
    Node* head = merge (head1, head2);
    traverse(head);
    

    
    return 0;
}
