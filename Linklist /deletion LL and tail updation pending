#include <iostream>
using namespace std;

class Node{
    
    public:
    int data;
    Node* next = NULL;
    
    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};

 void insertAtHead(Node* &head, int d){
    Node* newNode = new Node(d);
    newNode->next=head;
    head = newNode;
     
 }
 
void insertAtTail(Node* &Tail, int d){
    Node* newNode = new Node(d);
    Tail->next=newNode;
    Tail = newNode;
    
 }
 
int getLen(Node* &head){
    Node* temp = head;
    
    int count = 0;
    
    while(temp != 0){
        count++;
        temp = temp->next;
    }
    
    return count;
}

void insertAtPos(Node* &head,Node* &tail, int pos, int d){
    
    if (pos>getLen(head)+1){ //this is used for edge case
        cout<<"invalid position"<<endl;
        return;
        }
    else if (pos == getLen(head)+1 ){ // this is used for edge case
            insertAtTail(tail,d); 
        }
    else if(pos == 1 ){
            insertAtHead(head,d);
        } 
    else {
            // step 1 : creation of New Node
            Node* newNode = new Node(d);
            
            // step 2 
            Node* prev = head;
            int t = pos-2;
            while(t--){
                prev = prev->next;
            }
            
            // step 3 : connection update 
            newNode->next = prev->next;
            prev->next = newNode;
            
        }    
}

void deleteNode(Node* &head, int target, int pos){
    
    // empty list
    if(head == NULL){
        return;
    }
    
    Node* temp = head;
    Node* prev = NULL;
    if(target == temp->data && pos == 1){
        head = head->next;
        temp->next = NULL;
        delete temp;
    }
    else{
        while(temp != NULL && temp->data != target){
            prev = temp;
            temp = temp->next;
        }
        // here we are assuming that we have found the element
        
        if(temp == NULL ){
            cout << " Node not found"<<endl;
        }
        prev->next = temp->next;
        temp->next = NULL;
        delete temp;
    }
    
     // tail updation pending
    
}


 void traverse(Node* &head){
     Node* temp = head;
    while(temp != NULL){
        cout<<temp->data<<" ";
        temp = temp -> next;
    }
    cout<<endl;
 }


int main()
{
    Node* first = new Node(3);
    Node* head = first;
    Node* tail = first;
    
    insertAtTail(tail,5);
    insertAtTail(tail,7);
    insertAtTail(tail,9);
    insertAtTail(tail,11);
    
    traverse(head);
    
    insertAtPos(head,tail,1,12);
    
    traverse(head);
    
    deleteNode(head,9,1);
    
    traverse(head);
    
    

    return 0;
}
