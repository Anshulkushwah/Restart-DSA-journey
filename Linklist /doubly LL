#include <iostream>

using namespace std;

class Node {
    public:
    
    int data;
    Node* next = NULL;
    Node* prev = NULL;
    
    Node(int d){
        this->data = d;
        this->next = NULL;
        this->prev = NULL;
    }
    
};

void insertAtHead(Node* &head, int d ){
     Node* newNode = new Node(d);
     newNode->next = head;
     head->prev = newNode;
     head = newNode;
     
}

void insertAtTail(Node* &tail, int d){
     Node* newNode = new Node(d);
     tail->next = newNode;
     newNode->prev = tail;
     tail = newNode;
     
}

int getLen(Node* &head){
    Node* temp = head;
    
    int count = 0;
    
    while(temp != 0){
        count++;
        temp = temp->next;
    }
    
    return count;
}

void insertAtPos(Node* &head,Node* &tail, int pos, int d){
    
    if (pos>getLen(head)+1){ //this is used for edge case
        cout<<"invalid position"<<endl;
        return;
        }
    else if (pos == getLen(head)+1 ){ // this is used for edge case
            insertAtTail(tail,d); 
        }
    else if(pos == 1 ){
            insertAtHead(head,d);
        }
    else {
         Node* newNode = new Node(d);
         
         Node* prev = head;
            int t = pos-2;
            while(t--){
                prev = prev->next;
            }
            
        newNode->next=prev->next;
        newNode->next->prev = newNode;
        prev->next = newNode;
        newNode->prev = prev;    
    }    
    
}
 void traverse(Node* &head){
     Node* temp = head;
    while(temp != NULL){
        cout<<temp->data<<" ";
        temp = temp -> next;
    }
    cout<<endl;
 }

int main()
{
    // code of doubly link list
    Node* first = new Node(3);
    Node* head = first;
    Node* tail = first;
    
    insertAtHead(head,4);
    insertAtHead(head,5);
    insertAtHead(head,6);
    
    traverse(head);
    
    insertAtTail(tail,7);
    insertAtTail(tail,8);
    insertAtTail(tail,9);
    insertAtTail(tail,10);
    
     traverse(head);
     insertAtPos(head,tail,8,12);
     traverse(head);

    return 0;
    
}
