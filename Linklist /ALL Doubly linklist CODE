// Doubly linklist
class Node{
    public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int d){
        this->data = d;
        this->prev = NULL;
        this->next = NULL;
    }
};

void insertAtHead(Node* &head, int d){
    Node* newNode = new Node(d);
    newNode->next=head;
    head->prev=newNode;
    head = newNode;
}

void insertAtTail(Node* &tail, int d){
     Node* newNode = new Node(d);
     tail->next=newNode;
     newNode->prev=tail;
     tail = newNode;
}

void traverse(Node* &head){
     Node* temp = head;
     
     while(temp!= NULL){
        cout<<temp->data<<" ";
        temp= temp->next;
     }
     
     cout << endl;
}

int getLength(Node* &head){
    Node* temp = head;
    int count = 0;
    while(temp != NULL){
        count++;
        temp = temp->next;
    }
    
    return count;
}

void insertAtPosition(Node* &head,Node* &tail,int pos, int d){
    Node* temp = head;
    int len = getLength(head);
    
    if(pos == 1){
        insertAtHead(head,d);
        return;
    }
    
    if(pos<1 || pos>len+1){
        cout<<"invalid data"<<endl;
        return;
    } 
    
    int t = pos-2;
    
    while(t--){
        temp = temp->next;
    }
    
    if(temp->next == NULL){
        insertAtTail(tail,d);;
        return;
    }
    
     Node* newNode = new Node(d);
     newNode->next=temp->next;
     temp->next->prev=newNode;
     temp->next=newNode;
     newNode->prev=temp;
}

void deleteNode(Node* &head,Node* &tail, int target, int pos){
    
    // empty case
    if(head == NULL) return;
    
    Node* temp = head;
    Node* prev = NULL;
    if(target == temp->data && pos == 1){
        head = head->next;
        temp->next = NULL;
        temp->prev = NULL;
        delete temp;
    }
    
    else{
        
        while(temp!=NULL && temp->data != target){
            prev = temp;
            temp = temp->next;
        }
        
        if(temp == NULL){
            cout<<"Node not found"<<endl;
            return;
        }

        // for delete last node and tail updation

    if(temp->next == NULL && temp->data == target){
        temp->prev = NULL;
        prev->next = NULL;
        tail = prev;
        delete temp;
        
        return;
    }    
        
    prev -> next = temp->next;
    temp->next->prev = prev;
    temp->next = NULL;
    temp->prev = NULL;
    delete temp;
    }
}

int main()
{   Node* b = new Node(3);
    
    Node* head = b;
    // insertAtHead(head,4);
    // insertAtHead(head,5);
    // insertAtHead(head,6);
    // insertAtHead(head,7);
    // insertAtHead(head,8);
    
    // traverse(head);
    
    Node* tail = b;
    insertAtTail(tail,9);
    insertAtTail(tail,10);
    insertAtTail(tail,11);
    insertAtTail(tail,12);
    insertAtTail(tail,14);
    
    traverse(head);
    
    // insertAtPosition(head,tail,7,20);
    // traverse(head);
     
    deleteNode(head,tail,14,1);
    traverse(head);
    

    return 0;
}
