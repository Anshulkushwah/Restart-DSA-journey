
// reverse linklist

#include <iostream>

using namespace std;

class Node{
    public:
    int data;
    Node* next;
    
    // constructor
    Node (int data){
        this->data = data;
        this->next = NULL;
    }
};

    // void insertAtHead(Node* &head, int d){
    //     // step 1 : create new node
    //     Node* temp = new Node(d);
    //     // step 2 : set next pointer to head Node
    //     temp->next = head;
    //     // step 3  : head updates
    //     head = temp;
    // }
    
    void insertAtTail(Node* &tail, int d){
        // step 1 : create new node
        Node* temp = new Node(d);
        // step 2 : set next pointer to head Node
        tail->next = temp;
        // step 3  : head updates
        tail = temp;
    }
    
    int getlen(Node* head){
        int count = 0;
        Node* current = head;
        while(current != NULL){
            count++;
            current = current->next;
        }
        return count;
    }
    
    void traverse(Node* &head){
        Node* temp = head;
        while(temp != NULL){
            cout<<temp->data<<" ";
            temp = temp -> next;
        }
        cout<<endl;
    }
 
 Node* reverse(Node* &head){
     Node* curr = head;
     Node* prev = NULL;
     
     while(curr != NULL) {
         Node* forward = curr -> next;
         curr->next = prev;
        //  aage badho
        prev = curr;
        curr = forward;
     }
     
     return prev;
 }    

int main()
{
    Node* b = new Node(3);
    Node* head = b;
    Node* tail = b;
    
    insertAtTail(tail,5);
    insertAtTail(tail,7);
    insertAtTail(tail,9);
    insertAtTail(tail,11);
    
    traverse(head);
    
    head = reverse (head);
    traverse(head);

    return 0;
}
