#include <iostream>

using namespace std;

class Node{
    public:
    int data;
    Node* next;
    
    // constructor
    Node (int data){
        this->data = data;
        this->next = NULL;
    }
};

    void insertAtHead(Node* &head, int d){
        // step 1 : create new node
        Node* temp = new Node(d);
        // step 2 : set next pointer to head Node
        temp->next = head;
        // step 3  : head updates
        head = temp;
    }
    
    void insertAtTail(Node* &tail, int d){
        // step 1 : create new node
        Node* temp = new Node(d);
        // step 2 : set next pointer to head Node
        tail->next = temp;
        // step 3  : head updates
        tail = temp;
    }
    
    int getlen(Node* head){
        int count = 0;
        Node* current = head;
        while(current != NULL){
            count++;
            current = current->next;
        }
        return count;
    }
    
    void insertAtPos(Node* &head, Node* &tail, int pos, int d){
        
        if (pos>getlen(head)+1){ //this is used for edge case
            cout<<"invalid position"<<endl;
            return;
        }
        
        else if (pos == getlen(head)+1 ){ // this is used for edge case
            insertAtTail(tail,d); 
            
        } 
        
       else if(pos == 1 ){
            insertAtHead(head,d);
        }
        
        else {
            // step 1 : creation of New Node
            Node* newNode = new Node(d);
            
            // step 2 
            Node* prev = head;
            int t = pos-2;
            while(t--){
                prev = prev->next;
            }
            
            // step 3 : connection update 
            newNode->next = prev->next;
            prev->next = newNode;
            
        }
    }
    
    void traverse(Node* &head){
        Node* temp = head;
        while(temp != NULL){
            cout<<temp->data<<" ";
            temp = temp -> next;
        }
        cout<<endl;
    }

int main()
{
    Node* b = new Node(3);
    Node* head = b;
    Node* tail = b;
    
    insertAtTail(tail,5);
    insertAtTail(tail,7);
    insertAtTail(tail,9);
    insertAtTail(tail,11);
    
    traverse(head);

    
    insertAtPos(head,tail,7,12);
    
    traverse(head);

    return 0;
}
