/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
// #include <queue>

using namespace std;

class Queue
{

public:
  int *arr;
  int front;
  int rear;
  int size;

    Queue (int n)
  {
    arr = new int[n];
      front = 0;
      rear = 0;
      size = n;
  }

  void push (int element)
  {
    if (rear == size)
      {
	cout << "Overflow ho gya " << endl;
	       return;
      }
    else
      {
	arr[rear] = element;
	rear++;
      }
  }

  void pop ()
  {
    if (front == rear)
      {
	cout << "UnderFlow ho gya" << endl;
	return;
      }
    else
      {
	arr[front] = -1;
	front++;
	if (front == rear)
	  {
	    front = rear = 0;
	  }
      }
  }

  bool isEmpty ()
  {
    if (front == rear)
      return true;
    else
      return false;
  }

  int getsize ()
  {
    return this->rear - front;
  }

  int getFront ()
  {
    if (front == rear)
      return -1;

    else
      return arr[front];
  }
};

int
main ()
{
  // // creation
  // queue<int>q;

  // // push element
  // q.push(3);
  // q.push(5);
  // q.push(8);
  // q.push(9);

  // // remove element
  // q.pop();

  // // size of queue
  // cout<< "Size of queue is: "<<q.size() <<endl;

  // // check q is empty or not
  // cout<<"Empty or not "<<q.empty() <<endl;

  // cout<<"Printing queue : ";

  // while(!q.empty()){
  //     cout<<q.front() <<" ";
  //     q.pop();
  // }

  Queue *q = new Queue (5);

  q->push (3);

  q->push (5);

  q->push (7);

  q->push (9);

  cout << "front element " << q->getFront () << endl;

  q->pop ();
  cout << " front element is " << q->getFront () << endl;

  cout << "Size of Queue is " << q->getsize () << endl;

  cout << " empty or not " << q->isEmpty () << endl;

  cout << "printing all element inside Queue " << endl;

  while (!q->isEmpty ())
    {
      cout << q->getFront() << " ";
      q->pop();
    }
  cout << endl;



  return 0;
}
